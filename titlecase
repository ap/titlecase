#!/usr/bin/perl
use 5.008001; use strict; use warnings; use utf8;

# Added localizations to https://github.com/ap/titlecase
our @SMALL_WORD_EN
	= qw/ (?<!q&)a an and as at(?!&t) but by en for if in of on or the to v[.]? via vs[.]? /;
our @SMALL_WORD_DE
   = qw/ der das die dem den des ein eine einem einen einer eines und oder aber als bei mit nach von vom zu in im ins aus auf aufs für mit bis über übers überm übern unter unterm untern unters vor vorm vorn vors zum zur durch durchs ohne gegen um an am ans /;
our @SMALL_WORD_PT
   = qw/ a as o os um uma uns umas à às ao aos como da das de do dos e na nas no nospelo pela pelos pelas em com sem até após como ante por para sob sobre per entre/;
our @SMALL_WORD_ES
    = qw/ el la las los un una unos unas y e o u ni a as os de del al en con por para sobre entre sin hacia tras bajo ante tras hasta según desde durante mediante según /;
our @SMALL_WORD_FR
    = qw/ le la les un une à au aux avec chez dans de des du en et pour par sur vers sous sans hors près lors dès via contre/;
our @SMALL_WORD_IT
    = qw/ la il l' lo le i gli uno una a al all' alla alle da dal dall' dagli dalli dalle delle dei degli del di in nel nell' nelle nei negli per su con tra fra senza sotto dopo verso /;
our @SMALL_WORD = ( @SMALL_WORD_EN, @SMALL_WORD_PT, @SMALL_WORD_DE, @SMALL_WORD_ES, @SMALL_WORD_FR, @SMALL_WORD_IT );

my $apos = q/ (?: ['’] [[:lower:]]* )? /;

sub titlecase {
	my @str = @_ or return;

	my $small_re = join '|', @SMALL_WORD;

	for ( @str ) {
		s{\A\s+}{}, s{\s+\z}{};

		$_ = lc $_ if not /[[:lower:]]/;

		s{
			\b (_*) (?:
				( (?<=[ ][/\\]) [[:alpha:]]+ [-_[:alpha:]/\\]+ |   # file path or
				[-_[:alpha:]]+ [@.:] [-_[:alpha:]@.:/]+ $apos |    # URL, domain, or email or
				[0-9] [0-9,._ ]+ $apos )                           # a numeric literal
				|
				( (?i: $small_re ) $apos )                         # or small word (case-insensitive)
				|
				( [[:alpha:]] [[:lower:]'’()\[\]{}]* $apos )       # or word w/o internal caps
				|
				( [[:alpha:]] [[:alpha:]'’()\[\]{}]* $apos )       # or some other word
			) (_*) \b
		}{
			$1 . (
			defined $2 ? $2         # preserve URL, domain, or email
			: defined $3 ? "\L$3"     # lowercase small word
			: defined $4 ? "\u\L$4"   # capitalize word w/o internal caps
			: $5                      # preserve other kinds of word
			) . $6
		}xeg;


		# Exceptions for small words: capitalize at start and end of title
		s{
			(  \A [[:punct:]]*         # start of title...
			|  [:.;?!][ ]+             # or of subsentence...
			|  [ ]['"“‘(\[][ ]*     )  # or of inserted subphrase...
			( $small_re ) \b           # ... followed by small word
		}{$1\u\L$2}xig;

		s{
			\b ( $small_re )      # small word...
			(?= [[:punct:]]* \Z   # ... at the end of the title...
			|   ['"’”)\]] [ ] )   # ... or of an inserted subphrase?
		}{\u\L$1}xig;

		# Exceptions for small words in hyphenated compound words
		## e.g. "in-flight" -> In-Flight
		s{
			\b
			(?<! -)					# Negative lookbehind for a hyphen; we don't want to match man-in-the-middle but do want (in-flight)
			( $small_re )
			(?= -[[:alpha:]]+)		# lookahead for "-someword"
		}{\u\L$1}xig;

		## # e.g. "Stand-in" -> "Stand-In" (Stand is already capped at this point)
		s{
			\b
			(?<!…)					# Negative lookbehind for a hyphen; we don't want to match man-in-the-middle but do want (stand-in)
			( [[:alpha:]]+- )		# $1 = first word and hyphen, should already be properly capped
			( $small_re )           # ... followed by small word
			(?!	- )					# Negative lookahead for another '-'
		}{$1\u$2}xig;
	}

	wantarray ? @str : ( @str > 1 ) ? \@str : $str[0];
}

use open qw( :encoding(UTF-8) :std );
use Getopt::Std 'getopts';

getopts 'f', \my %opt;

while ( readline ) {
	$_ = lc if $opt{'f'};
	print titlecase( $_ ), "\n";
}
